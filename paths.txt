const app = express();
const port = 3000;

// Settings
const LOG_MODE = 'disabled'; // Choose between 'enabled', 'disabled', or 'errors'
const TIME_ADJUSTMENT_MINUTES = 1; // Configurable minutes to subtract from the bus times

// Define rate limit constants
const API_POLL_INTERVAL = 10000; // Poll TFL API every 10 seconds
const VESTABOARD_UPDATE_INTERVAL = 20000; // Update Vestaboard every 20 seconds
const CACHE_DURATION = 15000; // Cache duration for API responses (15 seconds)
const SMOOTHING_DELAY = 17000; // Smoothing delay for bus time increases (17 seconds)

// Bus stop codes
const stopPointIdHarrow = '490013383S';  // First stop: TOWARDS HARROW
const stopPointIdWealdstone = '490013383E';  // Second stop: TOWARDS WEALDSTONE

// Your Vestaboard API key
const VESTABOARD_API_KEY = 'f27bdcd2+3990+495a+affd+0994a1c7d650';

// TFL API Keys
const TFL_APP_ID = 'e87aec6cdf7f4f3cab6cade6149b9de4';
const TFL_APP_KEY = '27974c2753874159aa3169b1d54ab990';

// Store last known times, timestamps, and cache for API responses
let lastApiData = '';  // This will store the last formatted data for easy access
let latestBusTimes = {};  // Store the latest bus times fetched from the API
let lastVestaboardOutput = '';  // Store the last output sent to Vestaboard
let retryInProgress = false;  // Flag to track if a retry is already scheduled
let lastVestaboardPushTime = 0;  // Timestamp of the last successful push

const lastKnownTimes = {
    'H14': { time: [], timestamp: 0 },
    '223': { time: [], timestamp: 0 },
    'H10': { time: [], timestamp: 0 },
};

const apiCache = {
    [stopPointIdHarrow]: { data: null, timestamp: 0 },
    [stopPointIdWealdstone]: { data: null, timestamp: 0 }
};

// Helper function for logging based on settings
const log = (message, type = 'info') => {
    const timestamp = getCurrentTimestamp();
    if (LOG_MODE === 'disabled') return;
    if (LOG_MODE === 'errors' && type !== 'error') return;

    console.log(`${timestamp} ${message}`);
};

// Helper function to get the current timestamp in [HH:MM:SS] format
const getCurrentTimestamp = () => {
    const now = new Date();
    return `[${now.toTimeString().split(' ')[0]}]`;
};

// Helper function to get the current time in milliseconds
const getCurrentTime = () => {
    return Date.now();
};

// Character codes for Vestaboard
const CHARACTER_CODES = {
    '|': 0,  // Space
    'A': 1,  'B': 2,  'C': 3,  'D': 4,  'E': 5,  'F': 6,  'G': 7,  'H': 8,  'I': 9,
    'J': 10, 'K': 11, 'L': 12, 'M': 13, 'N': 14, 'O': 15, 'P': 16, 'Q': 17, 'R': 18,
    'S': 19, 'T': 20, 'U': 21, 'V': 22, 'W': 23, 'X': 24, 'Y': 25, 'Z': 26, '1': 27,
    '2': 28, '3': 29, '4': 30, '5': 31, '6': 32, '7': 33, '8': 34, '9': 35, '0': 36,
    '!': 37, '@': 38, '#': 39, '$': 40, '(': 41, ')': 42, '-': 44, '+': 46, '&': 47,
    '=': 48, ';': 49, ':': 50, '\'': 52, '"': 53, '%': 54, ',': 55, '.': 56, '/': 59, 
    '?': 60, '°': 62, '‽': 63, '¿': 64, '^': 65, '*': 66, '_': 67, '~': 68, '{': 69, '}': 70, '≥': 71
};

// Helper function to format time with leading zeros and "MINS"
const formatTime = (time) => {
    if (time <= 0) return '00|MINS'; // Handle 00 MINS
    return `${time < 10 ? `0${time}` : time}|MINS`; // Format time
};

// Helper function to adjust bus times
const adjustBusTimes = (busTimes) => {
    const adjustedTimes = busTimes.map(time => parseInt(time) - TIME_ADJUSTMENT_MINUTES);
    return adjustedTimes.filter(time => time > 0);  // Remove negative times
};

// Helper function to fetch and format bus times for a specific stop
const getBusTimes = async (stopPointId) => {
    const now = Date.now();
    const cache = apiCache[stopPointId];

    // Return cached data if available and still valid
    if (cache.data && (now - cache.timestamp) < CACHE_DURATION) {
        return cache.data;
    }

    try {
        const response = await fetch(`https://api.tfl.gov.uk/StopPoint/${stopPointId}/Arrivals?app_id=${TFL_APP_ID}&app_key=${TFL_APP_KEY}`);
        const busData = await response.json();
        const groupedBusTimes = {};

        busData.forEach(bus => {
            const busNumber = bus.lineId.toUpperCase();  // Convert bus number to uppercase
            const arrivalTime = Math.round(bus.timeToStation / 60);  // Convert seconds to minutes

            if (!groupedBusTimes[busNumber]) {
                groupedBusTimes[busNumber] = [];
            }

            // Add the arrival time to the array
            groupedBusTimes[busNumber].push(arrivalTime <= 0 ? '00' : `${arrivalTime}`);
        });

        // Log original data to the console
        log(`Original ${stopPointId === stopPointIdHarrow ? 'Harrow' : 'Wealdstone'} Bus Times: ${JSON.stringify({ success: true, data: groupedBusTimes })}`);

        // Adjust the bus times based on TIME_ADJUSTMENT_MINUTES
        Object.keys(groupedBusTimes).forEach(busNumber => {
            groupedBusTimes[busNumber] = adjustBusTimes(groupedBusTimes[busNumber]);
        });

        // Sort the arrival times for each bus route
        Object.keys(groupedBusTimes).forEach(busNumber => {
            groupedBusTimes[busNumber].sort((a, b) => parseInt(a) - parseInt(b)); // Sort in ascending order
        });

        apiCache[stopPointId] = {
            data: { success: true, data: groupedBusTimes },
            timestamp: now
        };

        return apiCache[stopPointId].data;

    } catch (error) {
        log(`Error fetching bus times for stop ${stopPointId}: ${error.message}`, 'error');
        return { success: false, error: `Error fetching bus times: ${error.message}` };
    }
};

// Function to smooth out bus times with lag for increases
const smoothBusTimes = (currentTimes, route) => {
    const now = Date.now();
    const lastUpdate = lastKnownTimes[route].timestamp;
    const lastTimes = lastKnownTimes[route].time;

    if (now - lastUpdate > SMOOTHING_DELAY) {
        lastKnownTimes[route] = {
            time: currentTimes,
            timestamp: now
        };
        return currentTimes;
    }

    return lastTimes.map((time, index) => {
        return Math.min(currentTimes[index] || 60, time || 60); // Default to 60 mins if missing
    });
};

// Function to format each line to exactly 22 characters
const formatLine = (lineContent) => {
    return (lineContent + '|'.repeat(22)).slice(0, 22);
};

// Function to generate each line according to specified coordinates
const generateLine = (route, times) => {
    const maxLength = 22;
    let line = `${route}:`;

    const firstBusTime = times[0] || '';
    const secondBusTime = times[1] || '';

    // Handle no departures
    if (times.length === 0) {
        line += `|NO|DEPARTURES|`;
        line += '|'.repeat(maxLength - line.length + 1); // Fill remaining with '|'
        return formatLine(line);
    }

    // Handle single bus time
    if (times.length === 1) {
        line += `|${formatTime(firstBusTime)}|`;
        line += '|'.repeat(maxLength - line.length); // Fill remaining with '|'
        return formatLine(line);
    }

    // Handle two bus times
    line += `|${formatTime(firstBusTime)}|&|${formatTime(secondBusTime)}`;

    // Ensure line length is exactly 22 characters
    const currentLength = line.length;
    if (currentLength < maxLength) {
        line += '|'.repeat(maxLength - currentLength);
    } else if (currentLength > maxLength) {
        line = line.slice(0, maxLength); // Truncate if too long
    }

    return formatLine(line);
};

// Function to apply find-and-replace operation on the generated output
const applyFindAndReplace = (output) => {
    return output
        .replace(/\|01\|MINS\|/g, '|||DUE|||')
        .replace(/\|00\|MINS\|/g, '|||DUE|||');
};

// Function to convert text to Vestaboard character codes
const convertToCharacterCodes = (text) => {
    const rows = text.split('\n').map(line => line.slice(0, 22).split('').map(char => CHARACTER_CODES[char] || 0));
    
    // Ensure we have exactly 6 rows
    while (rows.length < 6) {
        rows.push(new Array(22).fill(0));
    }
    return rows;
};

// Function to update Vestaboard and store formatted bus times
const updateVestaboard = async (busTimes) => {
    const currentTime = getCurrentTime();

    // Check if we've waited long enough since the last Vestaboard push
    if (currentTime - lastVestaboardPushTime < VESTABOARD_UPDATE_INTERVAL) {
        log('Vestaboard update skipped: Waiting for the interval.');
        return;
    }

    try {
        const harrowH14Times = busTimes.harrowBusTimes.data['H14'] || [];
        const harrow223Times = busTimes.harrowBusTimes.data['223'] || [];
        const wealdstoneH10Times = busTimes.wealdstoneBusTimes.data['H10'] || [];

        // Smooth out bus times
        const smoothedH14Times = smoothBusTimes(harrowH14Times, 'H14');
        const smoothed223Times = smoothBusTimes(harrow223Times, '223');
        const smoothedH10Times = smoothBusTimes(wealdstoneH10Times, 'H10');

        // Fixed header and footer
        const line1 = '‽‽‽‽BUS|DEPARTURES‽‽‽‽';
        const line2 = '‽‽‽‽TOWARDS|HARROW‽‽‽‽';
        const line5 = '‽‽TOWARDS|WEALDSTONE‽‽';

        // Generate bus lines
        const line3 = generateLine('H14', smoothedH14Times);
        const line4 = generateLine('223', smoothed223Times);
        const line6 = generateLine('H10', smoothedH10Times);

        // Generate the output
        let output = [
            line1,
            line2,
            line3,
            line4,
            line5,
            line6
        ].join('\n');

        // Apply find-and-replace operation
        output = applyFindAndReplace(output);

        // Store the formatted data in `lastApiData` for the root route
        lastApiData = output;

        // Check if the output has changed
        if (output === lastVestaboardOutput) {
            if (!retryInProgress) {
                log('Output has not changed. Skipping Vestaboard update and retrying after half the interval.');
                
                // Set the flag to indicate a retry is scheduled
                retryInProgress = true;

                // Schedule the next update after half the normal interval (10 seconds)
                setTimeout(async () => {
                    retryInProgress = false;  // Reset the flag after retry
                    await updateVestaboard(latestBusTimes);
                }, VESTABOARD_UPDATE_INTERVAL / 2);
            }
            return;
        }

        // Store the new output and update the timestamp of the last successful push
        lastVestaboardOutput = output;
        lastVestaboardPushTime = currentTime;

        // Reset the retry flag if a successful update occurs
        retryInProgress = false;

        // Send the formatted output to Vestaboard
        const characterCodes = convertToCharacterCodes(output);

        try {
            const response = await fetch('https://rw.vestaboard.com/', {
                body: JSON.stringify(characterCodes),
                headers: {
                    'Content-Type': 'application/json',
                    'X-Vestaboard-Read-Write-Key': VESTABOARD_API_KEY
                },
                method: 'POST'
            });

            const responseBody = await response.text();  // Get the response body as text for detailed logging

            if (!response.ok) {
                // Log the detailed error response
                throw new Error(`Vestaboard API Error (Status: ${response.status}): ${responseBody}`);
            }

            const data = JSON.parse(responseBody);
            log(`Vestaboard message sent successfully: ${JSON.stringify(data)}`);

        } catch (error) {
            log(`Error sending message to Vestaboard: ${error.message}`, 'error');
            log(`Full Error: ${error}`, 'error');
        }

    } catch (error) {
        log(`Error generating bus times: ${error.message}`, 'error');
    }
};

// Poll TFL API immediately on startup and then every 10 seconds
const pollTflApi = async () => {
    try {
        log('Polling TFL API for latest bus times...');
        
        const harrowBusTimes = await getBusTimes(stopPointIdHarrow);
        const wealdstoneBusTimes = await getBusTimes(stopPointIdWealdstone);

        // Log the bus times to confirm successful polling
        log(`Adjusted Harrow Bus Times: ${JSON.stringify(harrowBusTimes)}`);
        log(`Adjusted Wealdstone Bus Times: ${JSON.stringify(wealdstoneBusTimes)}`);

        // Store latest bus times so we can push to Vestaboard every 20 seconds
        latestBusTimes = { harrowBusTimes, wealdstoneBusTimes };

        // Now trigger the first Vestaboard update after we have data
        updateVestaboardNow();

    } catch (error) {
        log(`Error polling TFL API: ${error.message}`, 'error');
    }
};

// Update Vestaboard
const updateVestaboardNow = async () => {
    try {
        log('Updating Vestaboard with latest bus times...');
        await updateVestaboard(latestBusTimes);
    } catch (error) {
        log(`Error updating Vestaboard: ${error.message}`, 'error');
    }
};

// Poll TFL API every 10 seconds after the first immediate poll
wrapperPollingInterval = setInterval(pollTflApi, API_POLL_INTERVAL);;

// Update Vestaboard every 20 seconds after the first immediate update
wrapperVestaboardUpdateInterval = setInterval(updateVestaboardNow, VESTABOARD_UPDATE_INTERVAL);

// Trigger the first poll and Vestaboard update immediately on startup
pollTflApi();

// HTTP GET route for displaying the most recent bus times
app.get('/', (req, res) => {
    if (!lastApiData) {
        return res.send('Bus departure information is not yet available.');
    }
    res.send(`<pre>${lastApiData}</pre>`);
});

// Start the server
app.listen(port, () => {
    log(`Server running at http://localhost:${port}`);
});
